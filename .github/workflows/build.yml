# Si avvale del servizio GitHub Actions, che permette di eseguire delle actions che possono essere configurate per eseguire
# il processo di compilazione e distribuzione del software in remoto da parte di runner che girano su server virtuali dedicati di GitHub.
# GitHub Actions permette di controllare la correttezza del codice durante la compilazione e consente la distrizione degli artefatti 
# tramite scheda Actions del repository.

name: Build

on:
  push:
    branches: [ master ]

env:
  CCACHE_VERSION: 4.11.3
  CCACHE_MAXSIZE: 500Mi
  # see https://ccache.dev/manual/latest.html#_precompiled_headers
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime

jobs:

  windows:
    runs-on: windows-latest
    env:
      # needed on Windows because wiRenderer conditionally includes wiShaderDump.h
      # and only our CMake config has a workaround for it
      CCACHE_NODIRECT: 1
    steps:
      # L'azione actions/checkout è utilizzata per clonare il repository del codice sorgente nel runner di GitHub Actions.
      # L'azione actions/checkout@v4 supporta anche diversi parametri opzionali per personalizzare il comportamento del checkout. 
      # Ecco alcuni esempi:
      #   with:
      #     ref: [my-branch, sha-commit-id, my-tag]
      # Clona un # Clona un branch, commit o tag specifico
    - uses: actions/checkout@v4

    - name: Restore Ccache database
      id: restore-ccache
      uses: actions/cache/restore@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\ccache
        key: ccache-win-${{ github.run_id }}
        restore-keys: ccache-win-

    - name: Install Ccache
      run: |
        curl -sOSL https://github.com/ccache/ccache/releases/download/v$Env:CCACHE_VERSION/ccache-$Env:CCACHE_VERSION-windows-x86_64.zip
        unzip -qj ccache-$Env:CCACHE_VERSION-windows-x86_64.zip ccache-$Env:CCACHE_VERSION-windows-x86_64/ccache.exe
        mv ccache.exe cl.exe
        mv .github/workflows/Directory.Build.props.ghbuild Directory.Build.props

    - name: Initial compile
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        MSBuild WickedEngine.sln /t:OfflineShaderCompiler /m /p:Configuration=Release /p:Platform=x64

    - name: Generate shader dump
      shell: cmd
      run: |
        cd "WickedEngine"
        "../BUILD/x64/Release/OfflineShaderCompiler/OfflineShaderCompiler.exe" hlsl6 spirv shaderdump strip_reflection

    - name: Recompile with shader dump
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        MSBuild WickedEngine.sln /t:clean /m /p:Configuration=Release /p:Platform=x64
        MSBuild WickedEngine.sln /t:Editor_Windows /m /p:Configuration=Release /p:Platform=x64

    - name: Save Ccache database
      id: save-ccache
      if: always() && steps.restore-ccache.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\ccache
        key: ${{ steps.restore-ccache.outputs.cache-primary-key }}

    - name: Move files
      shell: cmd
      run: |
        move BUILD\x64\Release\Editor_Windows\Editor_Windows.exe .\
        move Editor\config.ini .\
        move Editor\startup.lua .\
        move Editor\languages .\
        move Editor\fonts .\

    # L'azione upload-artifact di GitHub Actions è utilizzata per caricare artefatti generati durante l'esecuzione di un workflow. 
    # Questi artefatti possono essere file di build, log, risultati di test, o qualsiasi altro file che desideri conservare e 
    # rendere disponibile dopo l'esecuzione del workflow.
    # Gli artefatti caricati utilizzando l'azione upload-artifact vengono conservati nei server di GitHub e associati al workflow che li ha generati. 
    # Puoi accedere e scaricare questi artefatti tramite l'interfaccia web di GitHub nella scheda "Actions" del repository.
        - name: Package Editor
      uses: actions/upload-artifact@v4 # Versione 4 dell'azione upload-artifact
      with:
        name: Editor (Windows)
        path: |
          languages/
          fonts/
          config.ini
          startup.lua
          Editor_Windows.exe


  linux:
    runs-on: ubuntu-latest
    name: linux (${{ matrix.cc }})
    strategy:
      fail-fast: false
      matrix:
        include:
        - cc: gcc
          cxx: g++
          package_bins: true
        - cc: clang
          cxx: clang++
          package_bins: false

    steps:
    # L'azione actions/cache@v4 di GitHub Actions è utilizzata per memorizzare nella cache i file o le directory tra le esecuzioni dei workflow. 
    # Questo può ridurre significativamente i tempi di build e migliorare l'efficienza, evitando di dover ricostruire o riscaricare dipendenze 
    # ogni volta che il workflow viene eseguito.
    # In questo caso, la cache viene utilizzata per memorizzare i file di ccache, un compilatore di cache che può accelerare le compilazioni.
    # path: ~/.cache/ccache è la directory predefinita utilizzata da ccache per memorizzare i file cache.
    # key: ccache-${{ github.run_id }} specifica una chiave univoca per la cache. In questo caso, la chiave è composta dal 
    # prefisso ccache- seguito dall'ID dell'esecuzione corrente del workflow (github.run_id). Questo garantisce che ogni esecuzione del workflow 
    # abbia una chiave univoca.
    # restore-keys: ccache specifica una lista di chiavi che possono essere utilizzate per ripristinare la cache. In questo caso, 
    # se la cache con la chiave ccache non è disponibile, verrà tentato il ripristino utilizzando le chiavi elencate in restore-keys.
    # save-always: true specifica che la cache deve essere salvata anche se il workflow fallisce. Questo garantisce che la cache
    # venga aggiornata anche in caso di errori durante l'esecuzione del workflow.
    # ccache (Compiler Cache) è uno strumento che memorizza nella cache i risultati delle compilazioni per accelerare le compilazioni successive. 
    # Quando si utilizza ccache, i file oggetto generati dal compilatore vengono memorizzati nella cache. 
    # Se il compilatore viene eseguito di nuovo con gli stessi input, ccache può restituire i file oggetto dalla cache invece di ricompilarli, 
    # riducendo significativamente i tempi di compilazione.
    # Quando si passa -DCMAKE_C_COMPILER_LAUNCHER=ccache a CMake, si configura CMake per utilizzare ccache come "launcher" per il compilatore C\C++. 
    # Questo significa che ccache verrà eseguito ogni volta che il compilatore C\C++ viene invocato, 
    # permettendo a ccache di gestire la cache dei risultati della compilazione.
    # Effetti di -DCMAKE_C_COMPILER_LAUNCHER=ccache:
    #   Accelerazione delle Compilazioni:
    #     ccache memorizza nella cache i risultati delle compilazioni precedenti.
    #     Se il compilatore viene eseguito di nuovo con gli stessi input, ccache può restituire i file oggetto dalla cache invece di ricompilarli.
    #     Questo riduce significativamente i tempi di compilazione, specialmente per progetti di grandi dimensioni o per compilazioni incrementali.
    #   Trasparenza:
    #     L'uso di ccache è trasparente per il processo di build. Il compilatore viene invocato normalmente, ma ccache gestisce la cache in background.
    #     Non è necessario modificare il codice sorgente o il processo di build esistente.
    - uses: actions/checkout@v4

    - name: Restore Ccache database
      id: restore-ccache
      uses: actions/cache/restore@v4
      with:
        path: ~/.cache/ccache
        key: ccache-${{ matrix.cc }}-${{ github.run_id }}
        restore-keys: ccache-${{ matrix.cc }}-

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libsdl2-dev ccache

    - name: Initial compile
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DWICKED_USE_IPO=NO
        make -j$(nproc)
    - name: Generate shader dump
      run: |
        cd build/WickedEngine
        ./offlineshadercompiler spirv rebuild shaderdump
        mv wiShaderDump.h ../../WickedEngine/

    - name: Recompile with shader dump
      run: |
        cd build
        make -j $(nproc)

    - name: Save Ccache database
      id: save-ccache
      if: always() && steps.restore-ccache.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ~/.cache/ccache
        key: ${{ steps.restore-ccache.outputs.cache-primary-key }}

    - name: Move files
      if: matrix.package_bins
      run: |
        mv build/Editor/Editor ./Editor_Linux
        mv Editor/config.ini ./
        mv Editor/startup.lua ./
        mv Editor/fonts ./

    - name: Package Editor
      if: matrix.package_bins
      uses: actions/upload-artifact@v4
      with:
        name: Editor (Linux)
        path: |
          fonts/
          config.ini
          startup.lua
          Editor_Linux

  content:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Package Content
      uses: actions/upload-artifact@v4
      with:
        name: Content
        path: |
          Content/Documentation
          Content/models
          Content/scripts
          Content/terrain
